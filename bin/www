#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatty:server');
var http = require('http');
var redis = require('redis');
var redisClient = redis.createClient();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and connect that to sochet.io.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

redisClient.flushall();

/**
  * Handling the start page
*/
var startPage = io.of('/');

startPage.on('connection', function(client) {

  //  validation
  client.on('check', function(data) {
    var vald = {
      prevent : false,
      message : ""
    };

    console.log(data);

    redisClient.sismember('rooms', data.room, function(err, result) {
      // console.log("nor: " + result);
      if(result == 0) {
        vald.prevent = false;
        vald.message = "";
        // console.log(vald);
        client.emit('checked', vald);
      } else if(result == 1) {
        redisClient.sismember(data.room + 'Users', data.nick, function(err, result) {
          // console.log("yesr: " + result);
          if(result == 0) {
            vald.prevent = false;
            vald.message = "";
          } else {
            vald.prevent = true;
            vald.message = "There is a user in this room with that nick name. Select another nickname";
          }
          // console.log(vald);
          client.emit('checked', vald);
        });
      }

    });
  });

});

/**
  * The chat server code
  */
var chatServer = io.of('/chat');

chatServer.on('connection', function(client) {
  console.log("Client connected");

  //  when a user joins
  client.on('join', function(data) {
    client._name = data.name;
    client._room = data.room;
    console.log(data.name + ' joined.');

    // join the room
    client.join(data.room);

    // check for the room
    redisClient.sismember('rooms', data.room, function(err, result) {
      // is the room does not exist create it
      if(result === 0) {
        redisClient.sadd('rooms', data.room);
      }
    });

    // tell everyone in that room that a new user came
    client.to(data.room).broadcast.emit('newUser', data.name);

    // add the user to the database <room>Users
    redisClient.sadd(data.room + 'Users', data.name);

    // send the already joined users to the new user this will include the new user
    // as we entered that in the above set
    redisClient.smembers(data.room + 'Users', function(err, members) {
      console.log(members);
      members.forEach(function(member) {
        console.log(member);
        client.emit('joined', member);
      });
    });

    // send the 20 recent messages to the new user from the current room only
    redisClient.lrange(data.room + 'Messages', 0, -1, function(err, messages) {
       console.log('messages : ' + messages);
       if(messages.length > 0) {
        messages = messages.reverse();
        messages.forEach(function(element, index) {
          var data = JSON.parse(element);
          console.log(data);
          client.emit('newMessage', data);
        });
      }
    });
  });

  // when there is a message
  client.on('message', function(data) {
    if(client._name == undefined) {
      client._name = data.name;
      client._room = data.room;
      console.log(data.messager + ' joined.');

      // join the room
      client.join(data.room);

      // check for the room
      redisClient.sismember('rooms', data.room, function(err, result) {
        // is the room does not exist create it
        if(result === 0) {
          redisClient.sadd('rooms', data.room);
        }
      });

      // add the user to the database <room>Users
      redisClient.sadd(data.room + 'Users', data.name);

      // send the already joined users to the new user this will include the new user
      // as we entered that in the above set
      redisClient.smembers(data.room + 'Users', function(err, members) {
        console.log(members);
        members.forEach(function(member) {
          client.emit('joined', member);
        });
      });
    }

    console.log(data.messager + ' : ' + data.message);

    var dataStr = JSON.stringify(data);

    redisClient.lpush(data.room + 'Messages', dataStr, function(err, response) {
      redisClient.ltrim(data.room + 'Messages', 0, 19);
      console.log(response);
    });
    client.to(data.room).broadcast.emit('newMessage', data);
    client.emit('messageAck', data);
  });

  // when a client disconnects
  client.on('disconnect', function() {
    if(client._name != undefined) {
      console.log(client._name + " left the show.");
      redisClient.srem(client._room + "Users", client._name);
      client.leave(client._room);
      client.to(client._room).broadcast.emit('userLeft', client._name);
    }
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
